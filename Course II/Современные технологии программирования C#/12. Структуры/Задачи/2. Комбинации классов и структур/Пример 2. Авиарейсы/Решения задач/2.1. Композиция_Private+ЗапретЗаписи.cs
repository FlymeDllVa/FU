using System;
using System.Collections.Generic;
using System.Text;
/*
 * ПРАКТИЧЕСКОЕ ЗАНЯТИЕ 11. Задача 1.1
 * Предметная область - Авиарейсы. В предметной области определены 
 * информационные объекты, описывающие выполняемые авирейсы и объекты,
 * выполняющие запросы авиадиспетчера
 * Класс "Самолет"
 * Закрытые поля:
 * 1. Бортовой номер самолета (целое)
 * 2. Тип самолета(строка)
 * 3. Остаток ресурса(вещественное)
 * Свойства для доступа к закрытым полям(по чтению):
 * 1. Бортовой номер самолета
 * 2. Тип самолета
 * 3. Остаток ресурса
 *
 * Класс "Экипаж"
 * Закрытые поля:
 * 1.Фамилия командира экипажа(строка)
 * 2.Фамилия штурмана(строка)
 * Свойства для доступа к закрытым полям(по чтению): 
 * 1.Фамилия командира экипажа
 * 2.Фамилия штурмана
 * 
 * Класс "Авиарейс"
 * Закрытые поля:
 * 1. Обозначение рейса(строка)
 * 2. Борт, назначенный на выполнение рейса (Самолет)
 * 3. Экипаж, назначенный на выполнение рейса (Экипаж)
 * ВНИМАНИЕ!!! Отношение агрегации реализовано на логическом уровне.
 *             Поля Борт и Экипаж представляют собой ссылки.
 *             Данная реализация моделирует ситуацию: самолеты на стоянке,
 *             экипажи на отдыхе, авиарейсы - справочная таблица
 *             запланированных рейсов
 * Свойства для доступа к закрытым полям(по чтению): 
 * 1.Обозначение рейса
 * 2.Борт
 * 3.Экипаж
 * 
 * Класс "Запрос"
 * Открытые методы:
 * 1. Вывод полной таблицы авиарейсов
 * 2. Вывод Фамилий командиров экипажей самолетов заданного типа
 * 3. Вывод номеров самолетов с остатком ресурса меньше заданного
 * 
 * В основном классе сформировать таблицу авиарейсов. Вывести на экран
 * результаты обработки запросов авиадиспетчера:
 * 1. Полная таблица авиарейсов
 * 2. Фамилии командиров экипажей самолетов типа ТУ-154
 * 3. Бортовые номера самолетов с остатком ресурса меньше 150 часов
 * ВНИМАНИЕ! Упрощенный вариант решения этой задачи - "1.Агрегация_Public.cs"
 * Упрощения: все поля открыты, свойства отсутствуют. Упрощенный
 * вариант демонстрирует изменение таблицы авиарейсов косвенным
 * способом - изменением значений по альтернативной ссылке. 
 * Упрощенный вариант рассматривается в режиме демонстрации
*/
namespace EX1_1
{
    class Самолет
    {
        private int    ном;  //Бортовой номер самолета
        private string тип;  //Тип самолета
        private double ост;  //Остаток ресурса

        public int    Номер   { get { return ном; } }
        public string Тип     { get { return тип; } }
        public double Остаток { get { return ост; } }
        
        
        public Самолет(int номВх, string типВх, double остВх)
        {
            ном = номВх;   тип = типВх;   ост = остВх;
        }
    }


    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    class Экипаж
    {
        private string фамКом;  //Фамилия командира экипажа
        private string фамШт;   //Фамилия штурмана

        public string Командир { get { return фамКом; } }
        public string Штурман  { get { return фамШт; } }

        public Экипаж(string фамКомВх, string фамШтВх)
        {
            фамКом = фамКомВх; фамШт = фамШтВх;
        }
    }

    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    class Авиарейс
    {
        private string рейс; //Обозначение рейса
        private Самолет сам;  //Самолет
        private Экипаж экп;  //Экипаж

        public string Рейс { get { return рейс; } }
        public Самолет Борт { get { return сам; } }
        public Экипаж ЭкипажРейса { get { return экп; } }


        public Авиарейс(string рейсВх, Самолет самВх, Экипаж экпВх)
        {
            рейс = рейсВх;
            сам = самВх;
            экп = экпВх;
        }
    }

    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    class Запрос
    {
        public static void Таблица(Авиарейс[] таб)
        {
            for (int i = 0; i < таб.Length; i++)
                Console.WriteLine("{0,-10}{1,-15}{2,-15}{3,-10}{4,8:d6}{5,8:f2}",
                                   таб[i].Рейс,
                                   таб[i].ЭкипажРейса.Командир,
                                   таб[i].ЭкипажРейса.Штурман,
                                   таб[i].Борт.Тип,
                                   таб[i].Борт.Номер,
                                   таб[i].Борт.Остаток);
        }

        public static void Командиры(Авиарейс[] таб, string тип)
        {
            for (int i = 0; i < таб.Length; i++)
                if (таб[i].Борт.Тип == тип)
                    Console.WriteLine("{0,-20}", таб[i].ЭкипажРейса.Командир);
        }

        public static void Номера(Авиарейс[] таб, double ост)
        {
            for (int i = 0; i < таб.Length; i++)
                if (таб[i].Борт.Остаток < ост)
                    Console.WriteLine("{0,10:d6}", таб[i].Борт.Номер);
        }
    }

    //=====================================================================
    class Program
    {
        static void Main(string[] args)
        {
            Авиарейс[] таб;
            Самолет сам;
            Экипаж экп;
            таб = new Авиарейс[4];

            сам = new Самолет(555, "ТУ-154", 200.0);
            экп = new Экипаж("Иванов", "Петров");
            таб[0] = new Авиарейс("Б404", сам, экп);

            сам = new Самолет(333, "ИЛ-96", 500.0);
            экп = new Экипаж("Сидоров", "Климов");
            таб[1] = new Авиарейс("К685", сам, экп);

            сам = new Самолет(111, "ТУ-134", 120.0);
            экп = new Экипаж("Козлов", "Денисов");
            таб[2] = new Авиарейс("Д433", сам, экп);

            сам = new Самолет(888, "ТУ-154", 125.0);
            экп = new Экипаж("Суворов", "Смуров");
            таб[3] = new Авиарейс("Б697", сам, экп);

            Запрос.Таблица(таб);
            Console.WriteLine("Фамилии командиров экипажей на ТУ-154");
            Запрос.Командиры(таб, "ТУ-154");
            Console.WriteLine("Бортовые номера самолетов с ресурсом <150 часов");
            Запрос.Номера(таб, 150.0);
        }
    }
}
